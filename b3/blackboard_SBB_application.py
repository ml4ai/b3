# --------------------------------------------------------------------------
# Version 2 of simple blackboard application that generates integer values,
# computes their squares, and prints the squares.
# Will evolve this to exercise more of the new blackboard functionality
# --------------------------------------------------------------------------

import b3.blackboard as blackboard
# from b3.blackboard import *

STOP_VALUE = 5
"""
Specifies the last integer generated by the generate_integers KS
"""

VERBOSE = False
"""
When True, prints KS.execution_function activity for debugging
"""


# --------------------------------------------------------------------------
# Units


class Integer_Unit(blackboard.Standard_Unit_Instance):
    """
    Blackboard unit containing a generated integer
    """

    def __init__(self, **kwargs):
        self.value = None
        if 'value' in kwargs:
            self.value = kwargs['value']

        # This would be a "link" in a full BB implementation
        self.square = None

        blackboard.Standard_Unit_Instance.__init__(self, **kwargs)

    def __repr__(self):
        return "<Integer_Unit-{0} '{1}' {2}>".format(self.id, self.name, self.value)


class Square_Unit(blackboard.Standard_Unit_Instance):
    """
    Blackboard unit containing a squared integer
    """

    def __init__(self, **kwargs):
        self.value = None
        if 'value' in kwargs:
            self.value = kwargs['value']

        # This would be a "link" in a full BB implementation
        self.integer = None
        if 'integer' in kwargs:
            integer_instance = kwargs['integer']
            # set reference of this(self) to integer_instance
            self.integer = integer_instance
            # set reference of integer_instance.square to this(self)
            integer_instance.square = self

        blackboard.Standard_Unit_Instance.__init__(self, **kwargs)

    def __repr__(self):
        return "<Square_Unit-{0} '{1}' {3}^2={2}>"\
            .format(self.id, self.name, self.value, self.integer.value)


# --------------------------------------------------------------------------
# KSSs


class Startup_KS(blackboard.Knowledge_Source):
    """
    Startup KS
    Triggered by Control_Shell_Started_Event
    """
    def __init__(self, **kwargs):
        blackboard.Knowledge_Source.__init__(self,
                                             trigger_events=( blackboard.Control_Shell_Started_Event, ),
                                             execution_function=self.startup_ks_function,
                                             **kwargs)

    def startup_ks_function(self, ksa):
        """
        KSA Startup_KS execution function:
        Creates a single Integer_Unit on the BB
        """
        event = ksa.ksa_execution_context[0]

        global VERBOSE
        if VERBOSE:
            print ">>> Executing startup_ks_function({0})".format(ksa)
            print ">>>     ksa.execution_cycle: {0}".format(ksa.execution_cycle)
            print ">>>     ksa.rating: {0}".format(ksa.rating)
            print ">>>     ksa.ksa_execution_context: {0}".format(ksa.ksa_execution_context)
            print ">>>     event: {0}".format(event)
            print ">>>     Calling make_unit_instance(Integer_Unit, value=1)"

        blackboard.make_unit_instance(Integer_Unit, value=1)

# ---------------------------------


class Compute_Squares_KS(blackboard.Knowledge_Source):
    """
    KS that computes the square of its even.payload Integer_Unit.
    """

    def __init__(self, **kwargs):
        blackboard.Knowledge_Source.__init__(self,
                                             trigger_events=( (blackboard.Instance_Created_Event, Integer_Unit), ),
                                             execution_function=self.compute_square_ks_function,
                                             **kwargs)

    def compute_square_ks_function(self, ksa):
        """
        KSA Compute_Squares_KS execution function:
        Computes the square of the value in an integer object
        """
        event = ksa.ksa_execution_context[0]
        unit_instance_Integer_Unit = event.payload['unit_instance']

        assert isinstance(unit_instance_Integer_Unit, Integer_Unit), \
            "compute_square_ks_function(): event unit_instance is type {0}, not Integer_Unit" \
            .format(type(unit_instance_Integer_Unit))

        global VERBOSE
        if VERBOSE:
            print ">>> Executing compute_square_ks_function({0})".format(ksa)
            print ">>>     ksa.execution_cycle: {0}".format(ksa.execution_cycle)
            print ">>>     ksa.rating: {0}".format(ksa.rating)
            print ">>>     ksa.ksa_execution_context: {0}".format(ksa.ksa_execution_context)
            print ">>>     event.payload: {0}".format(event.payload)
            print ">>>     unit_instance: {0}".format(unit_instance_Integer_Unit)

        square_instance = blackboard.make_unit_instance(Square_Unit,
                                                        value=(unit_instance_Integer_Unit.value**2),
                                                        integer=unit_instance_Integer_Unit)
        unit_instance_Integer_Unit.square = square_instance

# ---------------------------------


class Generate_Integers_KS(blackboard.Knowledge_Source):
    """
    KS that generates a new Integer_Unit based on a triggering Square_Unit
    Instance_Created_Event.
    """
    def __init__(self, **kwargs):
        blackboard.Knowledge_Source.__init__(self,
                                             trigger_events=( (blackboard.Instance_Created_Event, Square_Unit), ),
                                             execution_function=self.generate_integer_ks_function,
                                             **kwargs)

    def generate_integer_ks_function(self, ksa):
        """
        KSA Generate_Integers_KS execution function:
        Creates the next Integer_Unit, triggered by the creation of a Square_Unit
        """
        event = ksa.ksa_execution_context[0]
        unit_instance_Square_Unit = event.payload['unit_instance']
        unit_instance_Integer_Unit = unit_instance_Square_Unit.integer

        global VERBOSE
        if VERBOSE:
            print ">>> Executing generate_integer_ks_function({0})".format(ksa)
            print ">>>     ksa.execution_cycle: {0}".format(ksa.execution_cycle)
            print ">>>     ksa.rating: {0}".format(ksa.rating)
            print ">>>     ksa.ksa_execution_context: {0}".format(ksa.ksa_execution_context)
            print ">>>     event.payload: {0}".format(event.payload)
            print ">>>     unit_instance: {0}".format(unit_instance_Square_Unit)
            print ">>>     unit_instance.integer: {0}".format(unit_instance_Integer_Unit)

        global STOP_VALUE
        if unit_instance_Integer_Unit.value >= STOP_VALUE:
            #: Stop because have reached STOP_VALUE
            if VERBOSE:
                print ">>>     Reached STOP_VALUE {0}".format(STOP_VALUE)
            blackboard.signal_event(blackboard.Control_Shell_Immediate_Stop_Event,
                                    blackboard=blackboard.get_current_blackboard(),
                                    message='Generate_Integers_KS.generate_integer_ks_function() reached STOP_VALUE {0}' \
                                    .format(STOP_VALUE))

        else:
            blackboard.make_unit_instance(Integer_Unit, value=unit_instance_Integer_Unit.value+1)

# ---------------------------------


class Print_Squares_KS(blackboard.Knowledge_Source):
    """ KS that prints the value of the created Square_object """
    def __init__(self, **kwargs):
        blackboard.Knowledge_Source.__init__(self,
                                             trigger_events=( (blackboard.Instance_Created_Event, Square_Unit), ),
                                             execution_function=self.print_squares_ks_function,
                                             **kwargs)

    def print_squares_ks_function(self, ksa):
        """
        KSA Print_Squares_KS execution function:
        Prints the values of the created Square_object
        """
        print ">>> Executing print_squares_ks_function({0})".format(ksa)

# ---------------------------------



# --------------------------------------------------------------------------

def application_reset():
    # set up fresh environment
    blackboard.delete_workspace_image()
    bb = blackboard.create_blackboard_repository(make_current=True)

    # Enable event printing for _all_ events
    bb.enable_event_printing((blackboard.Standard_Event_Instance, True))

    # for turning on all Control_Shell_Events -- this is
    # covered by Standard_Event_Instance
    # bb.enable_event_printing((Control_Shell_Event, True))
    # The above line includes turning on event printing
    # for all KSA_Events.  As an example of disabling
    # subevents, the following turns off all KSA_Events
    # and their subevents, but does not affect other
    # Control_Shell_Events
    # bb.disable_event_printing((KSA_Event, True))

    # Define the KSs
    blackboard.define_knowledge_source(Startup_KS)
    blackboard.define_knowledge_source(Compute_Squares_KS)
    blackboard.define_knowledge_source(Generate_Integers_KS)
    #Print_Squares_KS()


def run_application():
    application_reset()

    # Create the agenda control shell and start the control-loop
    acs = blackboard.Agenda_Control_Shell(activity_printing=True)

    print "\nBlackboard state before starting:"
    acs.blackboard.describe(verbose=True)
    acs.describe()

    result = acs.start()

    print "\nBlackboard state after stopping:"
    acs.blackboard.describe(verbose=True)
    acs.describe()

    return result



# --------------------------------------------------------------------------
# MAIN
# --------------------------------------------------------------------------

if __name__ == "__main__":
    run_application()